<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>KMP算法</title>
      <link href="/2022/08/25/kmp-suan-fa/"/>
      <url>/2022/08/25/kmp-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><p>一个人能能走的多远不在于他在顺境时能走的多快，而在于他在逆境时多久能找到曾经的自己</p><p>————KMP</p><p>参考代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KMP</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">kmp</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> dest<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//str文本串  dest 模式串</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> dest<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> dest<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> dest<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> i<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">kmpnext</span><span class="token punctuation">(</span><span class="token class-name">String</span> dest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>dest<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dest<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dest<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">!=</span> dest<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dest<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> dest<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">"ababacb"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">"abababaababacb"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token function">kmpnext</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">kmp</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> next<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>前缀 </li><li>后缀  </li><li>最大共有长度   </li><li>next[ ]数组</li></ul><h3 id="Brute-Force-暴力-算法"><a href="#Brute-Force-暴力-算法" class="headerlink" title="Brute-Force(暴力)算法"></a>Brute-Force(暴力)算法</h3><ol><li>主串和模式串逐个字符比较</li><li>当出现<strong>字符串不相同时</strong>，主串的比较位置重置为起始位置的下一个字符位置，模式串的比较位置重置为起始位置</li><li>匹配成功后返回主串中匹配串的起始位置，否则就返回错误代码</li></ol><p>缺点：在BF算法中，每次失配都需要回溯指向上次比较起始字符的下一个字符。算法的时间复杂度过高。</p><h3 id="KMP算法-1"><a href="#KMP算法-1" class="headerlink" title="KMP算法"></a>KMP算法</h3><p>设计思想：一次失败并不可怕，从失败中累积经验，让自己前进的步伐更快，成功的几率更高！<br>———KMP <em>(:з」∠)</em></p><p>待补充…</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面向对象编程-继承</title>
      <link href="/2022/08/17/mian-xiang-dui-xiang-bian-cheng-ji-cheng/"/>
      <url>/2022/08/17/mian-xiang-dui-xiang-bian-cheng-ji-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象编程-继承"><a href="#面向对象编程-继承" class="headerlink" title="面向对象编程-继承"></a>面向对象编程-继承</h2><h3 id="为什么要继承"><a href="#为什么要继承" class="headerlink" title="为什么要继承"></a>为什么要继承</h3><p>我们编写了两个类，一个Pupil类(小学生)，一个是Graduate(大学毕业生).问题:两个类的属性和方法有很多是相同的，怎么办?</p><p>&#x3D;&#x3D;&gt;继承(代码复用性~)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//大学生->模拟大学生考试的简单情况</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Graduate</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> score<span class="token punctuation">;</span><span class="token comment">//成绩</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setScore</span><span class="token punctuation">(</span><span class="token keyword">double</span> score<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">testing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大学生"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"正在考大学数学.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生名"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"  年龄"</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">"  成绩"</span><span class="token operator">+</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//小学生-》模拟小学生考试的一个情况</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pupil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> score<span class="token punctuation">;</span><span class="token comment">//成绩</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setScore</span><span class="token punctuation">(</span><span class="token keyword">double</span> score<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小学生"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"正在考小学数学.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小学生名"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"  年龄"</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">"  成绩"</span><span class="token operator">+</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承基本介绍和示意图"><a href="#继承基本介绍和示意图" class="headerlink" title="继承基本介绍和示意图"></a>继承基本介绍和示意图</h3><p>继承可以解决代码复用,让我们的编程更加靠近人类思维.当多个类存在相同的属性(变量)和方法时,可以从这些类中 抽象出父类,在父类中定义这些相同的属性和方法，所有的子类不需要重新定义这些属性和方法，只需要通过 extends 来声明继承父类即可。画出继承的示意图</p><p><img src="/2022/08/17/mian-xiang-dui-xiang-bian-cheng-ji-cheng/19.png"></p><h3 id="继承的基本语法"><a href="#继承的基本语法" class="headerlink" title="继承的基本语法"></a>继承的基本语法</h3><p>class 子类 extends 父类{<br>}</p><ol><li>子类就会自动拥有父类定义的属性和方法</li><li>父类又叫超类，基类</li><li>子类又叫派生类</li></ol><h3 id="快速入门案例"><a href="#快速入门案例" class="headerlink" title="快速入门案例"></a>快速入门案例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hspedu<span class="token punctuation">.</span>extend_<span class="token punctuation">.</span></span><span class="token class-name">Graduate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hspedu<span class="token punctuation">.</span>extend_<span class="token punctuation">.</span></span><span class="token class-name">Pupil</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Extends01</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>hspedu<span class="token punctuation">.</span>extend_<span class="token punctuation">.</span></span>Pupil</span> pupil <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pupil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pupil<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"银角大王~"</span><span class="token punctuation">;</span>pupil<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>pupil<span class="token punctuation">.</span><span class="token function">testing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pupil<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pupil<span class="token punctuation">.</span><span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>hspedu<span class="token punctuation">.</span>extend_<span class="token punctuation">.</span></span>Graduate</span> graduate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graduate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>graduate<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"金角大王~"</span><span class="token punctuation">;</span>        graduate<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>graduate<span class="token punctuation">.</span><span class="token function">testing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>graduate<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>graduate<span class="token punctuation">.</span><span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//父类,是 Pupil 和 Graduate 的父类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span><span class="token comment">//共有属性</span><span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">double</span> score<span class="token punctuation">;</span><span class="token comment">//成绩</span><span class="token comment">//共有的方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setScore</span><span class="token punctuation">(</span><span class="token keyword">double</span> score<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生名 "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" 年龄 "</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">" 成绩 "</span> <span class="token operator">+</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//让 Pupil 继承 Student 类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pupil</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小学生 "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" 正在考小学数学.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Graduate</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//和 Pupil 不一样</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大学生 "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" 正在考大学数学.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承给编程带来的便利"><a href="#继承给编程带来的便利" class="headerlink" title="继承给编程带来的便利"></a>继承给编程带来的便利</h3><ol><li>代码的复用性提高了</li><li>代码的扩展性和维护性提高了</li></ol><h3 id="继承的深入讨论-x2F-细节问题"><a href="#继承的深入讨论-x2F-细节问题" class="headerlink" title="继承的深入讨论&#x2F;细节问题"></a>继承的深入讨论&#x2F;细节问题</h3><ol><li><strong>子类继承了所有的属性和方法，非私有的属性和方法可以在子类直接访问, 但是私有属性和方法不能在子类直接访问，要通过父类提供公共的方法去访问</strong></li><li><strong>子类必须调用父类的构造器， 完成父类的初始化</strong></li><li><strong>当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的无参构造器，如果父类没有提供无参构造器，则必须在子类的构造器中用 super 去指定使用父类的哪个构造器完成对父类的初始化工作，否则，编译不会通过</strong></li><li><strong>如果希望指定去调用父类的某个构造器，则显式的调用一下 : super(参数列表)</strong></li><li><strong>super 在使用时，必须放在构造器第一行(super 只能在构造器中使用)</strong></li><li><strong>super() 和 this() 都只能放在构造器第一行，因此这两个方法不能共存在一个构造器</strong></li><li><strong>java 所有类都是 Object 类的子类, Object 是所有类的基类.</strong></li><li><strong>父类构造器的调用不限于直接父类！将一直往上追溯直到 Object 类(顶级父类)</strong></li><li><strong>子类最多只能继承一个父类(指直接继承)，即 java 中是单继承机制</strong></li><li><strong>不能滥用继承，子类和父类之间必须满足 is-a 的逻辑关系</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtendDetail</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        System.out.println("====第一个对象====");</span><span class="token comment">//        Sub sub = new Sub();//创建了子类对象</span><span class="token comment">//        System.out.println("====第二个对象====");</span><span class="token comment">//        Sub sub2 = new Sub("jack");</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====第三个对象===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Sub</span> sub3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token string">"king"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先找子类的构造器</span>        <span class="token comment">//   sub.sayOk();</span>    <span class="token comment">//子类必须调用父类的构造器，完成父类的初始化</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopBase</span>  <span class="token punctuation">&#123;</span><span class="token comment">//父类是Object</span>    <span class="token keyword">public</span> <span class="token class-name">TopBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造器TopBase被调用..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token keyword">extends</span> <span class="token class-name">TopBase</span> <span class="token punctuation">&#123;</span><span class="token comment">//父类</span>    <span class="token comment">//四个属性</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> n1<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> n2<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n3<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n4<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//无参构造器</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类的构造器Base()被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Base</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类Base(String name,int age)被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Base</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类Base(String name)被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//在父类提供一个public的方法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getN4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> n4<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test100</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">test200</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">test300</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test300"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">test400</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test400"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//call 调用</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callTest400</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">test400</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//可以输入ctrl+h可以看到类的继承关系</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span><span class="token comment">//子类</span>    <span class="token keyword">public</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//无参构造器</span>        <span class="token comment">//默认调用父类的无参构造器</span>         <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"smith"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类Sub()无参构造器被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//1.调用父类的无参构造器，如下 或者 什么都不写，默认调用super();</span>       <span class="token comment">// super();//父类的无参构造器</span>        <span class="token comment">//2.如果要调用父类的Base(String name)</span>        <span class="token comment">//super("frx");</span>        <span class="token comment">//3.调用父类的两个参数的构造器Base(String name,int age)</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"king"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//细节： super在使用时，必须放在构造器第一行</span>        <span class="token comment">//细节：super()和this()都只能放在构造器的第一行，</span>        <span class="token comment">// 因此这两个不能共存在一个构造器</span>        <span class="token comment">//this() 不能再使用了</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类的Sub(String name,int age)被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类的Sub(String name)被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">sayOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//非私有的属性和方法，可以在子类中访问</span>        <span class="token comment">//我们发现 除了父类的private不能访问，其他都能访问</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n1<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>n2<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>n3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test100</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test200</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test300</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n4="</span><span class="token operator">+</span><span class="token function">getN4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">callTest400</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//做中转</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承的本质分析（重要）"><a href="#继承的本质分析（重要）" class="headerlink" title="继承的本质分析（重要）"></a>继承的本质分析（重要）</h3><p>我们看一个案例来分析当子类继承父类，创建子类对象时，内存中到底发生了什么?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*继承的本质 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtendTheory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Son</span> son<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//内存的布局</span>        <span class="token comment">//（1）首先看子类是否有该属性</span>        <span class="token comment">//（2）如果子类有这个属性，并且可以访问，则返回信息</span>        <span class="token comment">//（3）如果子类没有这个属性，就看父类有没有这个属性（如果父类有，并且可以访问，就返回信息）</span>        <span class="token comment">//（4）如果父类没有这个属性，就按照（3）的规则，继续找上级父类，直到Object</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回的是大头儿子</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回的是39</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">GrandPa</span><span class="token punctuation">&#123;</span><span class="token comment">//爷类</span>    <span class="token class-name">String</span> name<span class="token operator">=</span><span class="token string">"大头爷爷"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> hobby<span class="token operator">=</span><span class="token string">"旅游"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token keyword">extends</span> <span class="token class-name">GrandPa</span><span class="token punctuation">&#123;</span><span class="token comment">//父类</span>    <span class="token class-name">String</span> name<span class="token operator">=</span><span class="token string">"大头爸爸"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token operator">=</span><span class="token number">39</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">&#123;</span><span class="token comment">//子类</span>    <span class="token class-name">String</span> name<span class="token operator">=</span><span class="token string">"大头儿子"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//先加载类，Object->Grandpa->Father->Son</span><span class="token comment">//在堆里面分配空间，先爷类分配空间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> -java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象编程-封装</title>
      <link href="/2022/08/15/mian-xiang-dui-xiang-bian-cheng-feng-zhuang/"/>
      <url>/2022/08/15/mian-xiang-dui-xiang-bian-cheng-feng-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象编程-封装"><a href="#面向对象编程-封装" class="headerlink" title="面向对象编程-封装"></a>面向对象编程-封装</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>封装(encapsulation)就是把抽象出的数据[属性]和对数据的操作[方法]封装在一起,数据被保护在内部,程序的其它部分只有通过被授权的操作[方法],才能对数据进行操作。</p><h3 id="封装的理解和好处"><a href="#封装的理解和好处" class="headerlink" title="封装的理解和好处"></a>封装的理解和好处</h3><ol><li>隐藏实现细节:方法(连接数据库) &lt;–调用(传入参数…)</li><li>可以对数据进行验证，保证安全合理</li></ol><h3 id="封装的实现步骤"><a href="#封装的实现步骤" class="headerlink" title="封装的实现步骤"></a>封装的实现步骤</h3><ol><li>将属性进行私有化private【不能直接修改属性】</li><li>提供一个公共的**(public)set方法，用于属性判断并赋值**<br>public void setXxx(类型 参数名){ &#x2F;&#x2F;Xxx表示某个属性<br>​ &#x2F;&#x2F;加入数据验证的业务逻辑<br>​ 属性&#x3D;参数名;<br>}</li><li>提供一个公共的**(public)get方法，用于获取属性的值**<br>public 数据类型 getXxx(){ &#x2F;&#x2F;权限判断，Xxx某个属性<br>​ return xx;<br>}</li></ol><h3 id="快速入门案例"><a href="#快速入门案例" class="headerlink" title="快速入门案例"></a>快速入门案例</h3><ul><li>看一个案例</li></ul><p>那么在 java 中如何实现这种类似的控制呢?<br>请大家看一个小程序(comstudy2encap_: Encapsulation01.java),<br>不能随便查看人的年龄,工资等隐私，并对设置的年龄进行合理的验证。年龄合理就设置，否则给默认年龄, 必须在 1-120, 年龄， 工资不能直接查看 ，name 的长度在 2-6 字符 之间</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Encapsulation01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"冯荣旭和冯荣旭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果我们直接使用构造器 指定属性</span>        <span class="token class-name">Person</span> smith <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"smith"</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======smith的信息======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>smith<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*不能随便查看别人的年龄，工资等隐私，名字公开要求：年龄合理 在1-120， name在2-6字符之间 */</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//名字公开</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment">//age私有</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span><span class="token comment">//工资私有</span>    <span class="token comment">//构造器 alt+insert</span>     <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token punctuation">&#125;</span>     <span class="token comment">//有三个属性的构造器</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">double</span> salary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        this.name = name;</span><span class="token comment">//        this.age = age;</span><span class="token comment">//        this.salary = salary;</span>        <span class="token comment">//我们尅将方法写在构造器中，这样仍然可以验证数据</span>        <span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setSalary</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//自己写 setXxx和 getsetXxx 太慢 我们使用快捷键 alt+insert</span>    <span class="token comment">//然后根据要求 写我们的代码</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//加入对数据的校验，相当于增加了业务逻辑</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"名字的长度不对，需在2-6字符"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"无名人"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//判断</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>age<span class="token operator">&lt;=</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果是合理范围</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你设置的年龄不对，年龄需要在1-120之间，给默认年龄18"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">//给默认年龄18</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> salary<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token keyword">double</span> salary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//可以这里增加对当前对象的权限判断</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//写一个方法，返回属性信息</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"信息为 name="</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"  age="</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">" salary= "</span><span class="token operator">+</span>salary<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="将构造器和setXxx结合"><a href="#将构造器和setXxx结合" class="headerlink" title="将构造器和setXxx结合"></a>将构造器和setXxx结合</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">//有三个属性的构造器</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">double</span> salary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        this.name = name;</span><span class="token comment">//        this.age = age;</span><span class="token comment">//        this.salary = salary;</span>        <span class="token comment">//我们尅将方法写在构造器中，这样仍然可以验证数据</span>        <span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setSalary</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h3><ul><li>创建程序,在其中定义两个类：Account 和 AccountTest 类体会 Java 的封装性。<ol><li>Account 类要求具有属性：姓名（长度为 2 位 3 位或 4 位）、余额(必须&gt;20)、密码（必须是六位）, 如果不满足，则给出提示信息，并给默认值(程序员自己定)</li><li>通过 setXxx 的方法给 Account 的属性赋值。</li><li>在 AccountTest 中测试</li></ol></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*创建程序，在其中定义两个类，Account和AccountTest类体会Java的封装性Account类要求具有属性：姓名（长度为2位3位或4位）、余额（必须>20）密码（必须是六位），如果不满足，则给出提示信息，并给默认值（程序员自己定）通过setXxx的方法给Account的属性赋值。在AccountTest中测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//为了封装，将三个属性设置为private</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> pwd<span class="token punctuation">;</span><span class="token comment">//提供两个构造器</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> balance<span class="token punctuation">,</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token function">setBalance</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">setPwd</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//姓名（长度为2位3位4位）</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"名字长度为2位3位4位,默认 无名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"无名人"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token keyword">double</span> balance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>balance<span class="token operator">></span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"余额不足，默认0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> pwd<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPwd</span><span class="token punctuation">(</span><span class="token class-name">String</span> pwd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pwd<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>pwd <span class="token operator">=</span> pwd<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密码长度应为六位 默认为000000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>pwd<span class="token operator">=</span><span class="token string">"000000"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//显示账号信息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//可以增加权限的校检</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"账号信息="</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">" 余额="</span><span class="token operator">+</span>balance<span class="token operator">+</span><span class="token string">" 密码"</span><span class="token operator">+</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        if()&#123;</span><span class="token comment">//            System.out.println("账号信息="+name+" 余额="+balance+" 密码"+pwd);</span><span class="token comment">//        &#125;else &#123;</span><span class="token comment">//            System.out.println("你无权查看...");</span><span class="token comment">//        &#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestAccount</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建Account</span>        <span class="token class-name">Account</span> account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        account<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Jacksmith"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        account<span class="token punctuation">.</span><span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        account<span class="token punctuation">.</span><span class="token function">setPwd</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        account<span class="token punctuation">.</span><span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Account</span> account1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token string">"smith"</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token string">"666666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=====smith的信息======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        account<span class="token punctuation">.</span><span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> -java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>包</title>
      <link href="/2022/08/13/bao/"/>
      <url>/2022/08/13/bao/</url>
      
        <content type="html"><![CDATA[<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><h3 id="看一个应用场景"><a href="#看一个应用场景" class="headerlink" title="看一个应用场景"></a>看一个应用场景</h3><p>现在有两个程序员共同开发一个java项目,程序员xiaoming希望定义一个类取名 Dog ,程序员xiaoqiang也想定义一个类也叫 Dog。两个程序员为此还吵了起来怎么办? ——》包</p><h3 id="包的三大作用"><a href="#包的三大作用" class="headerlink" title="包的三大作用"></a>包的三大作用</h3><ol><li>区分相同名字的类</li><li>当类很多时，可以很好的管理类</li><li>控制访问范围</li></ol><h3 id="包基本语法"><a href="#包基本语法" class="headerlink" title="包基本语法"></a>包基本语法</h3><p>package com.frx01</p><p>说明：</p><ol><li>package 关键字,表示打包</li><li>com.frx01:表示包名</li></ol><h3 id="包的本质分析"><a href="#包的本质分析" class="headerlink" title="包的本质分析"></a>包的本质分析</h3><p><img src="/2022/08/13/bao/17.png"></p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p><img src="/2022/08/13/bao/18.png"></p><h3 id="包的命名"><a href="#包的命名" class="headerlink" title="包的命名"></a>包的命名</h3><ul><li>命名规则</li></ul><p>只能包含数字、字母、下划线、小圆点…，但不能用数字开头，不能是关键字或保留字</p><pre class="line-numbers language-none"><code class="language-none">demo.class.exec1  &#x2F;&#x2F;错误class是关键字demo.12a  &#x2F;&#x2F;错误12a是数字开头demo.ab12.oa  &#x2F;&#x2F;对<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>命名规范</li></ul><p>一般是小写字母+小圆点一般是</p><p>com.公司名.项目名.业务模块名</p><pre class="line-numbers language-none"><code class="language-none">比如:com.frx01.oa.model; com.frx01.oa.coltroller;举例:com.sina.crm.user &#x2F;&#x2F;用户模块com.sina.crm.order &#x2F;&#x2F;订单模块com.sina.crm.utils &#x2F;&#x2F;工具类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用的包"><a href="#常用的包" class="headerlink" title="常用的包"></a>常用的包</h3><p>一个包下，包含很多的类，Java中常用的有:</p><ol><li>java.lang.* &#x2F;&#x2F;lang包是基本包，默认引入，不需要再引入</li><li>java.util.* &#x2F;&#x2F;util包，系统提供的工具包，工具类，使用Scanner</li><li>java.net.* &#x2F;&#x2F;网络包，网络开发</li><li>java.awt.* &#x2F;&#x2F;是做java的界面开发，GUI</li></ol><h3 id="如何引入包"><a href="#如何引入包" class="headerlink" title="如何引入包"></a>如何引入包</h3><p>语法：import 包;</p><p>我们引入一个包的主要目的是要使用该包下的类<br>比如 import.java.util.Scanner;就只是引入一个类Scanner。<br>import java.util.*;&#x2F;&#x2F;表示将java.util包所有都引入</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token comment">//注意：我们需要使用哪个类 就导入哪个类即可</span><span class="token comment">//import java.util.Scanner;//表示只会引入java.util的Scanner</span><span class="token comment">//import java.util.*;//表示将java.util 包下的所有类都引入（导入）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Import01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//使用系统提供 Arrays 完成 数组排序</span>        <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//比如对其进行排序</span>        <span class="token comment">//传统方法是，自己编写排序（冒泡）</span>        <span class="token comment">//系统是提供相关的类 可以方便完成 Arrays</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//输出排序结果</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意事项和细节"><a href="#注意事项和细节" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><ol><li>package的作用是声明当前类所在的包，需要放在类的最上面，一个类中最多只有一句package</li><li>import指令位置放在package的下面，在类的定义前面，可以有多句且没有顺序要求</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//package的作用是声明当前类所在的包，需要放在类的（或者文件）的最上面，</span><span class="token comment">//一个类中最多有只有一句 package</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>study1<span class="token punctuation">.</span>pkg</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token comment">//import 指令 位置放在package的下面，在类定义前面，可以有多局且没有顺序</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PkgDetail</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> -java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可变参数、作用域、构造方法/构造器</title>
      <link href="/2022/08/12/ke-bian-can-shu-zuo-yong-yu-gou-zao-fang-fa-gou-zao-qi/"/>
      <url>/2022/08/12/ke-bian-can-shu-zuo-yong-yu-gou-zao-fang-fa-gou-zao-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>java 允许将同一个类中多个同名同功能但参数个数不同的方法，封装成一个方法。<br>就可以通过可变参数实现</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p><strong>访问修饰符 返回类型 方法名(数据类型… 形参名){</strong><br><strong>}</strong></p><h3 id="快速入门案例"><a href="#快速入门案例" class="headerlink" title="快速入门案例"></a>快速入门案例</h3><p>看一个案例 类 HspMethod，方法sum[可以计算2个数的和，3个数的和，……]</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VarParameter01</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span>            <span class="token class-name">HspMethod</span> m<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HspMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//106</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">HspMethod</span><span class="token punctuation">&#123;</span><span class="token comment">//可以计算 2个数的和，3个数的和，4,5，..</span><span class="token comment">//可以使用方法重载</span><span class="token comment">//public int sum(int n1,int n2) &#123;//2个数的和</span><span class="token comment">//return n1+n2;</span><span class="token comment">//&#125;</span><span class="token comment">//public int sum(int n1,int n2,int n3) &#123;//3个数的和</span><span class="token comment">//return n1+n2+n3;</span><span class="token comment">//&#125;</span><span class="token comment">//public int sum(int n1,int n2,int n3,int n4) &#123;//4个数的和</span><span class="token comment">//return n1+n2+n3+n4;</span><span class="token comment">//.....</span><span class="token comment">//上面的三个方法名称相同，功能相同，参数个数不同-> 使用可变参数优化</span><span class="token comment">//1.int..表示接受的是可变参数，类型是int，既可以接受多个int（0-多）</span><span class="token comment">//2.使用可变参数时</span><span class="token comment">//3.遍历nums 求和即可</span><span class="token comment">//&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//System.out.println("接受的参数个数="+nums.length);</span><span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>res<span class="token operator">+=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意事项和使用细节"><a href="#注意事项和使用细节" class="headerlink" title="注意事项和使用细节"></a>注意事项和使用细节</h3><ol><li><strong>可变参数的实参可以为0个或任意多个</strong></li><li>可变参数的<strong>实参可以为数组</strong></li><li>可变参数<strong>本质就是数组</strong></li><li>可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数在<strong>最后</strong></li><li>一个形参列表只能出现<strong>一个可变参数</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VarParameterDetail</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token comment">//细节：可变参数的实参可以为数组</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">T</span> t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"长度="</span><span class="token operator">+</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//细节：可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数在最后</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token class-name">String</span> d1<span class="token punctuation">,</span><span class="token keyword">double</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h3><p>有三个方法，分别实现返回姓名和两门课成绩(总分)，返回姓名和三门课成绩(总分)，返回姓名和五门课成绩（总分）。封装成一个可变参数的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VarParameterExercise</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">HspMethod01</span> hm<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HspMethod01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hm<span class="token punctuation">.</span><span class="token function">showScore</span><span class="token punctuation">(</span><span class="token string">"milan"</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span><span class="token number">80.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hm<span class="token punctuation">.</span><span class="token function">showScore</span><span class="token punctuation">(</span><span class="token string">"terry"</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">HspMethod01</span><span class="token punctuation">&#123;</span><span class="token comment">/*有三个方法，分别实现返回姓名和两门课程（总分） * 返回姓名和三门课成绩（总分），返回姓名和五门课成绩（总分）， * 封装成一个可变参数的方法 */</span><span class="token comment">//分析1.方法名 showScore 2.形参(String,double...)3.返回String</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">showScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">double</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>scores<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">double</span> totalScore<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>scores<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>totalScore <span class="token operator">+=</span>scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> name<span class="token operator">+</span><span class="token string">"有"</span><span class="token operator">+</span>scores<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token string">"门科的成绩总分为"</span><span class="token operator">+</span>totalScore<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ol><li>在java编程中,主要的变量就是属性(成员变量)和局部变量。全局变量:也就是属性，作用域为整个类体Cat类：cry eat等方法使用属性</li><li>我们说的局部变量一般是指在成员方法中定义的变量。【举例Cat类:cry】</li><li>java中作用域的分类<ol><li>全局变量:也就是<strong>属性</strong>，作用域为整个类体Cat类：cry eat等方法使用属性</li><li>局部变量:也就是<strong>除了属性之外的其他变量</strong>，作用域为定义它的代码块中</li></ol></li><li><strong>全局变量(属性)可以不赋值，直接使用，因为有默认值，局部变量必须赋值后，才能使用，因为没有默认值。</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VarScope01</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//1在java编程中，主要的变量就是属性</span><span class="token comment">//2除了属性之外的其他变量，作用域为定义它的代码块中</span><span class="token comment">//3全部变量（属性）可以不赋值，直接使用，因为有默认值，</span><span class="token comment">//局部变量必须在赋值后，才能使用，因为没有默认值</span><span class="token comment">//</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">&#123;</span><span class="token comment">//全局变量：也就是属性，作用域为整个类体Cat类：cry eat 等方法的属性</span><span class="token comment">//属性在定义时，可以直接赋值</span><span class="token keyword">int</span> age <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//指定的值是10</span><span class="token keyword">double</span> weight<span class="token punctuation">;</span><span class="token comment">//不赋值默认值是0.0</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//不是属性，在代码块里定义</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//局部变量必须赋值才能使用，因为没有默认值</span><span class="token comment">//int num;×</span><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">String</span> address <span class="token operator">=</span><span class="token string">"北京的猫"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token operator">+</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"num="</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"weight"</span><span class="token operator">+</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//1.局部变量一般是指在成员方法中定义的变量</span><span class="token comment">//2.n和name都是局部变量</span><span class="token comment">//3.n和name的作用域在cry方法中</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span><span class="token string">"jack"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在eat方法中使用age="</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//System.out.println("在eat方法中使用cry的变量"+name);不允许使用</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意事项和细节使用"><a href="#注意事项和细节使用" class="headerlink" title="注意事项和细节使用"></a>注意事项和细节使用</h3><ol><li>属性和局部变量可以重名，<strong>访问时遵循就近原则</strong>。</li><li>在同一个作用域中，比如在同一个成员方法中，两个局部变量，不能重名。</li><li><strong>属性生命周期较长</strong>，伴随着对象的创建而创建，伴随着对象的销毁而销毁。<strong>局部变量,生命周期较短</strong>，伴随着它的代码块的执行而创建，伴随着代码块的结束而销毁.即在一次方法调用过程中。</li><li>作用域范围不同<ol><li>全局变量&#x2F;属性:可以被本类使用，或其他类使用(通过对象调用)</li><li>局部变量:只能在本类中对应的方法中使用</li></ol></li><li>修饰符不同<ol><li><strong>全局变量&#x2F;属性可以加修饰符</strong></li><li><strong>局部不可以加修饰符</strong></li></ol></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VarScopeDetail</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token class-name">Person</span> p1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*3.细节 属性生命周期较长，伴随着对象的创建而创建，伴随着对象的销毁而销毁 局部变量，生命周期较短，伴随着它的代码块的执行而创建 伴随着代码块的结束而销毁。即在一次方法调用过程中 */</span>p1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当执行say方法时，say方法的局部变量比如name，会创建，</span><span class="token comment">//当say执行完毕后，</span><span class="token comment">//name局部变量被销毁，但是属性（全局变量）仍然可以使用</span>             <span class="token class-name">T1</span> t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">T1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             t1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一种 跨类访问对象属性的方式</span>             t1<span class="token punctuation">.</span><span class="token function">test2</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第二种 跨类访问对象属性的方式</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">T1</span> <span class="token punctuation">&#123;</span><span class="token comment">//4细节 全局变量（属性）：可以被本类使用，或其他类使用（通过对象调用）</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Person</span> p1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//jack</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token class-name">Person</span> <span class="token class-name">P</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">P</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//jack</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token comment">//5细节 属性可以在前面加修饰符(public,protected,private..)，局部不能加</span><span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span><span class="token string">"jack"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//1细节 属性和局部变量可以重名，访问时遵循就近原则</span><span class="token comment">//public String name="King"; × 不允许加修饰符</span><span class="token class-name">String</span> name<span class="token operator">=</span><span class="token string">"King"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"say()name="</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出King</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> address<span class="token operator">=</span><span class="token string">"北京"</span><span class="token punctuation">;</span><span class="token comment">//String address="上海";×2细节 在一个方法中局部变量不能重名</span><span class="token class-name">String</span> name<span class="token operator">=</span><span class="token string">"frx"</span><span class="token punctuation">;</span><span class="token comment">//ok的，在不同的作用域里面</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="构造方法-x2F-构造器"><a href="#构造方法-x2F-构造器" class="headerlink" title="构造方法&#x2F;构造器"></a>构造方法&#x2F;构造器</h2><h3 id="看一个需求"><a href="#看一个需求" class="headerlink" title="看一个需求"></a>看一个需求</h3><p>我们来看一个需求:前面我们在创建人类的对象时，是先把一个对象创建好后，再给他的年龄和姓名属性赋值，如果现在我要求，在创建人类的对象时，就直接指定这个对象的年龄和姓名，该怎么做?这时就可以使用构造器。</p><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><p><strong>[修饰符] 方法名(形参列表){ 方法体; }</strong></p><ul><li>说明</li></ul><ol><li>构造器的修饰符可以默认， 也可以是 public protected private</li><li>没有返回值</li><li>在创建对象时，系统会自动的调用该类的构造器完成对象的初始化</li></ol><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p>现在我们就用构造方法来完成刚才提出的问题:在创建人类的对象时，就直接指定这个对象的年龄和姓名</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Constructor01</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token comment">//当我们new一个对象时，直接通过构造器指定名字的年龄</span>     <span class="token class-name">Person</span>  p1<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"smith"</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p1的信息如下"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p1对象name="</span><span class="token operator">+</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//smith</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p1对象age="</span><span class="token operator">+</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//80</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//在创建人类的对象时，就直接指定这个对象的年龄和姓名</span><span class="token comment">//</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">//构造器</span><span class="token comment">//1.构造器没有返回值，也不能写void</span><span class="token comment">//2.构造器的名称和类Person一样</span><span class="token comment">//3.（String pName，int pAge）</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> pName<span class="token punctuation">,</span><span class="token keyword">int</span> pAge<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造器被调用-完成对象的属性初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>name <span class="token operator">=</span>pName<span class="token punctuation">;</span>age <span class="token operator">=</span>pAge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意事项和使用细节-1"><a href="#注意事项和使用细节-1" class="headerlink" title="注意事项和使用细节"></a>注意事项和使用细节</h3><ol><li><strong>一个类可以定义多个不同的构造器，即构造器重载</strong><br>比如:我们可以再给Person类定义一个构造器,用来创建对象的时候,只指定人名,不需要指定年龄</li><li>构造器要和类名相同</li><li>构造器没有返回值</li><li>构造器是完成对象的初始化，并不是创建对象</li><li>在创建对象时，系统自动的调用该类的构造方法</li><li>如果程序员没有定义构造器，系统会自动给类生成一个默认无参构造器(也叫默认构造器)</li><li><strong>一旦定义了自己的构造器，默认的构造器就覆盖了，就不能再使用默认的无参构造器，除非显示的定义一下</strong>。即Dog(){}</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstructorDetail</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span>      <span class="token class-name">Person1</span> p1<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person1</span><span class="token punctuation">(</span><span class="token string">"king"</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一个构造器</span>      <span class="token class-name">Person1</span> p2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person1</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第二个构造器</span>      <span class="token class-name">Dog</span> dog1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">&#123;</span><span class="token comment">//如果程序员没有定义构造器，系统会自动给类生成一个默认无参构造器（也叫默认构造器）</span><span class="token comment">//使用javap指令 反编译看看</span><span class="token comment">/* 默认构造器 Dog()&#123;  &#125; */</span><span class="token keyword">public</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token class-name">String</span> dName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//显示的定义一下 默认无参构造器</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person1</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">//默认0</span><span class="token comment">//第一个构造器</span><span class="token keyword">public</span> <span class="token class-name">Person1</span><span class="token punctuation">(</span><span class="token class-name">String</span> pName<span class="token punctuation">,</span><span class="token keyword">int</span> pAge<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>name<span class="token operator">=</span>pName<span class="token punctuation">;</span>age<span class="token operator">=</span>pAge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//第2个构造器，只指定人名，不指定年龄</span><span class="token keyword">public</span> <span class="token class-name">Person1</span><span class="token punctuation">(</span><span class="token class-name">String</span> pName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>name<span class="token operator">=</span>pName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="课堂练习-1"><a href="#课堂练习-1" class="headerlink" title="课堂练习"></a>课堂练习</h3><p>在前面定义的 Person 类中添加两个构造器：<br>第一个无参构造器：利用构造器设置所有人的 age 属性初始值都为 18<br>第二个带 pName 和 pAge 两个参数的构造器：使得每次创建 Person 对象的同时初始化对象的 age 属性值和 name属性值<br>分别使用不同的构造器，创建对象.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstructorExercise</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span>   <span class="token class-name">Person2</span> p1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//无参构造器</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p1的信息name="</span><span class="token operator">+</span>p1<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"，age="</span><span class="token operator">+</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Person2</span> p2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person2</span><span class="token punctuation">(</span><span class="token string">"scott"</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p2的信息name="</span><span class="token operator">+</span>p2<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"，age="</span><span class="token operator">+</span>p2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token comment">/* 第一个构造器：利用构造器设置所有人的age属性初始值为18 第二个带pName和pAge两个参数的构造器： 使得每次创建Person对象的同时初始化对象的age属性值和name属性值 分别使用不同的构造器，创建对象 */</span><span class="token keyword">class</span> <span class="token class-name">Person2</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//默认值 null</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">//默认值 0</span><span class="token keyword">public</span> <span class="token class-name">Person2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Person2</span><span class="token punctuation">(</span><span class="token class-name">String</span> pName<span class="token punctuation">,</span><span class="token keyword">int</span> pAge<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>name<span class="token operator">=</span>pName<span class="token punctuation">;</span>age<span class="token operator">=</span>pAge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> -java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法重载（OverLoad）</title>
      <link href="/2022/08/10/fang-fa-chong-zai-overload/"/>
      <url>/2022/08/10/fang-fa-chong-zai-overload/</url>
      
        <content type="html"><![CDATA[<h2 id="方法重载（OverLoad）"><a href="#方法重载（OverLoad）" class="headerlink" title="方法重载（OverLoad）"></a>方法重载（OverLoad）</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>Java中允许同一个类中，多个同名方法的存在，但要求 形参列表不一致!<br>比如:System.out.println(); out 是 PrintStream 类</p><h3 id="重载的好处"><a href="#重载的好处" class="headerlink" title="重载的好处"></a>重载的好处</h3><ol><li>减轻了起名的麻烦</li><li>减轻了记名的麻烦</li></ol><h3 id="快速入门案例"><a href="#快速入门案例" class="headerlink" title="快速入门案例"></a>快速入门案例</h3><p>案例：类：MyCalculator 方法：calculate</p><ol><li>calculate(int n1, int n2) &#x2F;&#x2F;两个整数的和</li><li>calculate(int n1, double n2) &#x2F;&#x2F;一个整数，一个 double 的和</li><li>calculate(double n2, int n1)&#x2F;&#x2F;一个 double ,一个 Int 和</li><li>calculate(int n1, int n2,int n3)&#x2F;&#x2F;三个 int 的和</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OverLoad</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span>     <span class="token class-name">MyCalculator</span> mc<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyCalculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyCalculator</span><span class="token punctuation">&#123;</span><span class="token comment">//下面的四个calculate方法构成了重载</span><span class="token comment">//两个整数的和</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> n1<span class="token punctuation">,</span><span class="token keyword">int</span> n2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> n1<span class="token operator">+</span>n2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//一个整数，一个double的和</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> n1<span class="token punctuation">,</span><span class="token keyword">double</span> n2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> n1<span class="token operator">+</span>n2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//一个double，一个int的和</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">double</span> n2<span class="token punctuation">,</span><span class="token keyword">int</span> n1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"calculate(double n1，int n2)被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> n1<span class="token operator">+</span>n2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//三个int的和</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> n1<span class="token punctuation">,</span><span class="token keyword">int</span> n2<span class="token punctuation">,</span><span class="token keyword">int</span> n3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> n1<span class="token operator">+</span>n2<span class="token operator">+</span>n3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意事项和使用细节"><a href="#注意事项和使用细节" class="headerlink" title="注意事项和使用细节"></a>注意事项和使用细节</h3><ol><li>方法名：<strong>必须相同</strong></li><li>形参列表：<strong>必须不同</strong>(形参类型或个数或顺序，至少有一样不同，参数名无要求)</li><li>返回类型：无要求</li></ol><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><ol><li>编写程序，类Methods中定义三个重载方法并调用。方法名为m。三个方法分别接收一个int参数、两个int参数、一个字符串参数。分别执行平方运算并输出结果，相乘并输出结果，输出字符串信息。在主类的main ()方法中分别用参数区别调用三个方法。</li><li>在Methods类，定义三个重载方法max()，第一个方法，返回两个int值中的最大值,第二个方法，返回两个double值中的最大值，第三个方法，返回三个double值中的最大值，并分别调用三个方法。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OverLoadExercise</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token class-name">Methods</span> method<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         method<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//100</span>         method<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//200</span>         method<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ok</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> method<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*  编写程序，类Methods中定义三个重载方法并调用。方法名为m。三个方法分别接受一个int型 、两个int型，相乘并输出结果，输出字符串信息，在主类的main（）方法中 分别用参数区别调用三个方法 */</span><span class="token comment">/* 定义三个重载方法max(),第一个方法，返回两个int值中的最大值， 第二个方法，返回两个double值中的最大值，第三个方法 返回三个double值中的最大值，并分别调用三个方法 */</span><span class="token keyword">class</span> <span class="token class-name">Methods</span><span class="token punctuation">&#123;</span><span class="token comment">//分析</span><span class="token comment">//1方法名max</span><span class="token comment">//2形参(int,int)</span><span class="token comment">//3.int</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> n1<span class="token punctuation">,</span><span class="token keyword">int</span> n2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> n1<span class="token operator">></span>n2<span class="token operator">?</span>n1<span class="token operator">:</span>n2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">double</span> n1<span class="token punctuation">,</span><span class="token keyword">double</span> n2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> n1<span class="token operator">></span>n2<span class="token operator">?</span>n1<span class="token operator">:</span>n2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">double</span> n1<span class="token punctuation">,</span><span class="token keyword">double</span> n2<span class="token punctuation">,</span><span class="token keyword">double</span> n3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>n1<span class="token operator">></span>n2<span class="token operator">?</span>n1<span class="token operator">:</span>n2<span class="token punctuation">)</span><span class="token operator">></span>n3<span class="token operator">?</span><span class="token punctuation">(</span>n1<span class="token operator">></span>n2<span class="token operator">?</span>n1<span class="token operator">:</span>n2<span class="token punctuation">)</span><span class="token operator">:</span>n3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//不使用自动转换比 使用自动转换 优先级高</span><span class="token comment">//分析 </span><span class="token comment">//1方法名m</span><span class="token comment">//2形参int</span><span class="token comment">//3void</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平方="</span><span class="token operator">+</span><span class="token punctuation">(</span>n<span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">//1方法名m</span><span class="token comment">//2形参(int,int)</span><span class="token comment">//3void</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token keyword">int</span> n1<span class="token punctuation">,</span><span class="token keyword">int</span> n2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"相乘="</span><span class="token operator">+</span><span class="token punctuation">(</span>n1<span class="token operator">*</span>n2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//1方法名m</span><span class="token comment">//2形参(String)</span><span class="token comment">//3void</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"传入的str="</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> -java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法递归调用(重要)</title>
      <link href="/2022/08/09/fang-fa-di-gui-diao-yong-chong-yao/"/>
      <url>/2022/08/09/fang-fa-di-gui-diao-yong-chong-yao/</url>
      
        <content type="html"><![CDATA[<h2 id="方法递归调用"><a href="#方法递归调用" class="headerlink" title="方法递归调用"></a>方法递归调用</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>简单地说：<strong>递归就是方法自己调用自己</strong>，每次调用时传入不同的变量.递归有助于编程者解决复杂问题，同时可以让代码变的简洁</p><h3 id="递归能解决什么问题"><a href="#递归能解决什么问题" class="headerlink" title="递归能解决什么问题"></a>递归能解决什么问题</h3><ol><li>各种数学问题如:8皇后问题，汉诺塔，阶乘问题，迷宫问题，球和篮子的问题</li><li>各种算法也会使用到递归，比如快排，归并排序，二分查找，分治算法等</li><li>将用栈解决的问题–&gt;递归代码比较简洁</li></ol><h3 id="递归举例"><a href="#递归举例" class="headerlink" title="递归举例"></a>递归举例</h3><p>列举两个小案例,来理解递归调用机制</p><ol><li>打印问题</li><li>阶乘问题</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Recursion01</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span>    <span class="token class-name">T</span>  t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出n=2 n=n3 n=4</span> <span class="token keyword">int</span> res<span class="token operator">=</span>   t1<span class="token punctuation">.</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5的阶乘的结果="</span><span class="token operator">+</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">&#123;</span><span class="token comment">//分析</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n="</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//factorial阶乘</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/08/09/fang-fa-di-gui-diao-yong-chong-yao/09.png"></p><p><img src="/2022/08/09/fang-fa-di-gui-diao-yong-chong-yao/10.png"></p><h3 id="递归重要原则"><a href="#递归重要原则" class="headerlink" title="递归重要原则"></a>递归重要原则</h3><ol><li><strong>执行一个方法时，就创建一个新的受保护的独立空间（栈空间）</strong></li><li><strong>方法的局部变量是独立的，不会相互影响，比如n变量</strong></li><li><strong>如果方法中使用的是引用数据变量（比如数组，对象），就会共享该引用类型的数据</strong></li><li><strong>递归必须向退出递归的条件逼近，否则就是无限递归，出现StrackOverflowError,死归了</strong></li><li><strong>当一个方法执行完毕时，同时当方法执行完毕或者返回时，该方法也执行完毕</strong></li></ol><h3 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h3><ol><li>请使用递归的方式求出斐波那契数1,1,2,3,5,8,13…给你一个整数n，求出它的值是多少</li><li>猴子吃桃子问题:有一堆桃子，猴子第一天吃了其中的一半，并再多吃了一个!以后每天猴子都吃其中的一半，然后再多吃一个。当到第10天时，想再吃时(即还没吃)发现只有1个桃子了。问题:最初共多少个桃子?</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecursionExercise01</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TT</span> t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Scanner</span> input<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// long n=input.nextInt();</span>   <span class="token comment">// System.out.println("当n="+n+"时对应的斐波那契数是"+t1.fibonacci(n));</span>    <span class="token keyword">int</span> day<span class="token punctuation">;</span>    day<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span>day<span class="token operator">+</span><span class="token string">"天有"</span><span class="token operator">+</span>t1<span class="token punctuation">.</span><span class="token function">peach</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"个桃子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">TT</span><span class="token punctuation">&#123;</span><span class="token comment">/* 请使用递归的方式求出斐波那契数1,1,2,3,5,8,13...给你一个整数n  思路分析 1.当n=1时，斐波那契数是1 2.当n=2时，斐波那契数是1 3.当n>=3 斐波那契数 是前两个数的和 4.这里就是一个递归的思路 */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"要求输入的n>=1的整数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">/*       猴子吃桃子问题：有一堆桃子，猴子第一天吃了其中的一半，并再多吃了一个！       以后每天猴子都吃其中的一半，然后再多吃一个。当到第10天时，       想再吃时（即还没吃），发现只有一个桃子了。问题：最初共有多少个桃子             思路分析 逆推        1.day=10 时有1个桃子        2.day=9  时有（day10+1）*2=4        3.day=8  时有（day9+1）*2=10        4.规律就是  前一天的桃子 =（后一天的桃子 +1）*2        5.递归        */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">peach</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>day<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//第10天，只有一个桃</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>day<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>day<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token function">peach</span><span class="token punctuation">(</span>day<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"day在1-10，请重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="递归调用实例-迷宫问题"><a href="#递归调用实例-迷宫问题" class="headerlink" title="递归调用实例-迷宫问题"></a>递归调用实例-迷宫问题</h3><p><img src="/2022/08/09/fang-fa-di-gui-diao-yong-chong-yao/11.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MiGong</span> <span class="token punctuation">&#123;</span><span class="token comment">//编写一个 main 方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//思路</span><span class="token comment">//1. 先创建迷宫，用二维数组表示 int[][] map = new int[8][7];</span><span class="token comment">//2. 先规定 map 数组的元素值: 0 表示可以走 1 表示障碍物</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//3. 将最上面的一行和最下面的一行，全部设置为 1</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>map<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token comment">//4.将最右面的一列和最左面的一列，全部设置为 1</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        map<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>map<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>map<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//测试回溯</span><span class="token comment">// map[2][1] = 1;</span><span class="token comment">// map[2][2] = 1;</span><span class="token comment">// map[1][2] = 1</span>            <span class="token comment">//输出当前的地图</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=====当前地图情况======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> map<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出一行</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//使用 findWay 给老鼠找路</span><span class="token class-name">T</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//下右上左</span>t1<span class="token punctuation">.</span><span class="token function">findWay</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n====找路的情况如下====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> map<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出一行</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token punctuation">&#123;</span><span class="token comment">//使用递归回溯的思想来解决老鼠出迷宫</span>    <span class="token comment">//解读</span><span class="token comment">//1. findWay 方法就是专门来找出迷宫的路径</span><span class="token comment">//2. 如果找到，就返回 true ,否则返回 false</span><span class="token comment">//3. map 就是二维数组，即表示迷宫</span><span class="token comment">//4. i,j 就是老鼠的位置，初始化的位置为(1,1)</span><span class="token comment">//5. 因为我们是递归的找路，所以我先规定 map 数组的各个值的含义</span><span class="token comment">// 0 表示可以走 1 表示障碍物 2 表示可以走 3 表示走过，但是走不通是死路</span><span class="token comment">//6. 当 map[6][5] =2 就说明找到通路,就可以结束，否则就继续找. </span>    <span class="token comment">//7. 先确定老鼠找路策略</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">findWay</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map <span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//说明已经找到</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//当前这个位置 0,说明表示可以走</span><span class="token comment">//我们假定可以走通</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//使用找路策略，来确定该位置是否真的可以走通</span><span class="token comment">//下->右->上->左</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">findWay</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//先走下</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">findWay</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//右</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">findWay</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//上</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">findWay</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//左</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">//map[i][j] = 1 , 2, 3</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//修改找路策略，看看路径是否有变化</span><span class="token comment">//下->右->上->左 ==> 上->右->下</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">findWay2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map <span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//说明已经找到</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//当前这个位置 0,说明表示可以走</span><span class="token comment">//我们假定可以走通</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//使用找路策略，来确定该位置是否真的可以走通</span><span class="token comment">//上->右->下->左</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">findWay2</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//先走上</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">findWay2</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//右</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">findWay2</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//下</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">findWay2</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//左</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">//map[i][j] = 1 </span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="递归调用实例-汉诺塔"><a href="#递归调用实例-汉诺塔" class="headerlink" title="递归调用实例-汉诺塔"></a>递归调用实例-汉诺塔</h3><ul><li>汉诺塔传说</li></ul><p>汉诺塔：汉诺塔（又称河内塔）问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着 64 片圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</p><p>假如每秒钟移动一次，共需多长时间呢？移完这些金片需要 5845.54 亿年以上，太阳系的预期寿命据说也就是数百亿年。真的过了 5845.54 亿年，地球上的一切生命，连同梵塔、庙宇等，都早已经灰飞烟灭</p><ul><li>汉诺塔代码实现</li></ul><p><img src="/2022/08/09/fang-fa-di-gui-diao-yong-chong-yao/12.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HanoiTower</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token class-name">Tower</span> tower<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Tower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入汉诺塔上面要移动的盘子数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Scanner</span> n1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> n<span class="token operator">=</span>n1<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tower<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token char">'A'</span><span class="token punctuation">,</span><span class="token char">'B'</span><span class="token punctuation">,</span><span class="token char">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Tower</span><span class="token punctuation">&#123;</span><span class="token comment">//方法</span><span class="token comment">//num表示要移动的个数，a，b，c分别表示A塔，B塔，C塔</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span><span class="token keyword">char</span> a<span class="token punctuation">,</span><span class="token keyword">char</span> b<span class="token punctuation">,</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果只有一个盘num=1</span><span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token string">"->"</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果有多个盘，可以看成两个，最下面的和上面的所有盘（num-1）</span><span class="token comment">//（1）先移动a上面的n-1个盘到b，借助c</span><span class="token function">move</span><span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>c<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(2)把a最下面的这个盘，移动到c</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token string">"->"</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(3)再把b上的n-1个盘，移动到c，借助a</span><span class="token function">move</span><span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span>a<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> -java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成员方法传参机制(重要)</title>
      <link href="/2022/08/07/cheng-yuan-fang-fa-chuan-can-ji-zhi-chong-yao/"/>
      <url>/2022/08/07/cheng-yuan-fang-fa-chuan-can-ji-zhi-chong-yao/</url>
      
        <content type="html"><![CDATA[<h2 id="成员方法传参机制"><a href="#成员方法传参机制" class="headerlink" title="成员方法传参机制"></a>成员方法传参机制</h2><h3 id="基本数据类型的传参机制"><a href="#基本数据类型的传参机制" class="headerlink" title="基本数据类型的传参机制"></a>基本数据类型的传参机制</h3><ol><li>看一个案例，分析结果是什么？</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//假如传的是10和20</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\na和b交换前的值a="</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"\tb="</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a=10 b=20</span><span class="token comment">//完成a和b的交换</span><span class="token keyword">int</span> tmp<span class="token operator">=</span>a<span class="token punctuation">;</span>a<span class="token operator">=</span>b<span class="token punctuation">;</span>b<span class="token operator">=</span>tmp<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\na和b交换后的值a="</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"\tb="</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a=20 b=10</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodParameter01</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span>    <span class="token class-name">Abc</span> obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Scanner</span> input <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n1<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n2<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Abc</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\na和b交换前的值a="</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"\tb="</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//完成a和b的交换</span><span class="token keyword">int</span> tmp<span class="token operator">=</span>a<span class="token punctuation">;</span>a<span class="token operator">=</span>b<span class="token punctuation">;</span>b<span class="token operator">=</span>tmp<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\na和b交换后的值a="</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"\tb="</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/08/07/cheng-yuan-fang-fa-chuan-can-ji-zhi-chong-yao/31.png"></p><h3 id="引用数据类型的传参机制"><a href="#引用数据类型的传参机制" class="headerlink" title="引用数据类型的传参机制"></a>引用数据类型的传参机制</h3><p>下面的代码输出什么</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodParameter02</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token comment">//测试</span><span class="token class-name">AB</span> b<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">AB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//int arr[]= &#123;1,2,3&#125;;</span><span class="token comment">//b.test100(arr);//调用方法</span><span class="token comment">//System.out.println("main的arr数组");</span><span class="token comment">////遍历数组</span><span class="token comment">//for(int i=0;i&lt;arr.length;i++) &#123;</span><span class="token comment">//System.out.println(arr[i]+"\t");</span><span class="token comment">//&#125;</span><span class="token comment">//    System.out.println();</span>    <span class="token comment">//测试</span>    <span class="token class-name">Person02</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"jack"</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">test200</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//测试题，如果test200执行的是p=null，下面结果为10</span>    <span class="token comment">//测试题，如果test200执行的是p=new Person（）;下面结果为10</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main的p.age"</span><span class="token operator">+</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person02</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">AB</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test200</span><span class="token punctuation">(</span><span class="token class-name">Person02</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//p.age=10000;//修改对象属性</span><span class="token comment">//p=null;</span>p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"Tom"</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//B类中编写一个方法test100</span><span class="token comment">//可以接受一个数组，在方法中修改该数组，看看原来的数组是否发生变化</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test100</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span><span class="token comment">//修改元素</span><span class="token comment">//遍历数组</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test100d的arr数组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结论及示意图</li></ul><p>引用传参传递的是地址(传递也是值，但是值是地址),可以通过形参影响实参！</p><p><img src="/2022/08/07/cheng-yuan-fang-fa-chuan-can-ji-zhi-chong-yao/32.png"></p><h3 id="成员方法返回类型是引用类型应用实例"><a href="#成员方法返回类型是引用类型应用实例" class="headerlink" title="成员方法返回类型是引用类型应用实例"></a>成员方法返回类型是引用类型应用实例</h3><ol><li>编写类 MyTools 类，编写一个方法可以打印二维数组的数据。</li><li>编写一个方法 copyPerson，可以复制一个 Person 对象，返回复制的对象。克隆对象， 注意要求得到新对象和原来的对象是两个独立的对象，只是他们的属性相同</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodExercise02</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token comment">//编写一个方法copyPerson，可以复制一个Person对象，返回复制的对象。克隆对象，</span>   <span class="token comment">//注意要求得到新对象和原来的对象是两个独立的对象，，只是他们的属性相同</span><span class="token class-name">Person03</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  p<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"milan"</span><span class="token punctuation">;</span>  p<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token class-name">MyTools02</span> tools<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTools02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person03</span> p2<span class="token operator">=</span>tools<span class="token punctuation">.</span><span class="token function">copyPerson</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//到此p和p2是Person对象，但是是两个独立的对象，属性相同</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p的属性age"</span><span class="token operator">+</span>p<span class="token punctuation">.</span>age<span class="token operator">+</span><span class="token string">",p的名字"</span><span class="token operator">+</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p2的属性age"</span><span class="token operator">+</span>p2<span class="token punctuation">.</span>age<span class="token operator">+</span><span class="token string">",p的名字"</span><span class="token operator">+</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里提示：可以通过输出对象的hashCode看看对象是否是一个</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token operator">==</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person03</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyTools02</span><span class="token punctuation">&#123;</span><span class="token comment">//编写一个方法copyPerson，可以复制一个Person对象，返回复制的对象。克隆对象，</span>    <span class="token comment">//注意要求得到新对象和原来的对象是两个独立的对象，，只是他们的属性相同</span><span class="token comment">//1.方法的返回类型boolean</span><span class="token comment">//2.方法的名字  isOdd</span><span class="token comment">//3.方法的形参 （int number)</span><span class="token comment">//4.方法体,判断</span><span class="token keyword">public</span> <span class="token class-name">Person03</span> <span class="token function">copyPerson</span><span class="token punctuation">(</span><span class="token class-name">Person03</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//创建一个新的对象</span><span class="token class-name">Person03</span> p2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span>name<span class="token operator">=</span>p<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">//把原来的名字赋给p2.name</span>p2<span class="token punctuation">.</span>age<span class="token operator">=</span>p<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token comment">//把原来对象的年龄赋给p2.age</span><span class="token keyword">return</span> p2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> -java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成员方法</title>
      <link href="/2022/08/06/cheng-yuan-fang-fa/"/>
      <url>/2022/08/06/cheng-yuan-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>在某些情况下，我们要需要定义成员方法(简称方法)。比如人类:除了有一些属性外( 年龄，姓名..),我们人类还有一 些行为比如:可以说话、跑步..,通过学习，还可以做算术题。这时就要用成员方法才能完成。现在要求对 Person 类完善。</p><h3 id="成员方法快速入门"><a href="#成员方法快速入门" class="headerlink" title="成员方法快速入门"></a>成员方法快速入门</h3><ol><li>添加speak成员方法，输出“我是一个好人”</li><li>添加cal01成员方法，可以计算从1+…+1000的结果</li><li>添加cal02成员方法，该方法可以接受一个数n，计算从1+…+n的结果</li><li>添加getSum成员方法，可以计算两个数的和</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Method01</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 方法使用</span><span class="token comment">// 1.方法写好后，如果不去调用，不会输出</span><span class="token comment">// 2.先创建对象，然后调用方法即可</span><span class="token class-name">Person</span> p1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用方法</span>p1<span class="token punctuation">.</span><span class="token function">cal01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用cal01</span>p1<span class="token punctuation">.</span><span class="token function">cal02</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用cal02</span><span class="token comment">//调用getSum方法，同时num1=10，num2=20</span><span class="token comment">//把方法getSum返回的值，赋给变量returnRes</span><span class="token keyword">int</span> returnRes <span class="token operator">=</span>p1<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getSum方法返回的值="</span><span class="token operator">+</span>returnRes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token comment">//方法（成员方法）</span><span class="token comment">//添加speak 成员方法，输出“我是一个好人”</span><span class="token comment">//解读</span><span class="token comment">//1.public 表示方法是公开的</span><span class="token comment">//2.void:表示方法没有返回值</span><span class="token comment">//3.speak():speak是方法名； （）形参列表</span><span class="token comment">//4.&#123;&#125;方法体，可以写我们要执行的代码</span><span class="token comment">//5.System.out.println（"我是一个好人");表示我们的方法就是输出一句话</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一个好人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">//添加cal01 成员方法，可以计算从1+...+1000的结果</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cal01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//循环完成</span>   <span class="token keyword">int</span> res <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   res<span class="token operator">+=</span>i<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"计算结果="</span><span class="token operator">+</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>       <span class="token comment">//添加cal02的方法，该方法可以接受一个数n，计算从1+..+n的结果</span>   <span class="token comment">//解读</span>   <span class="token comment">//1.（int n）形参列表，表示当前有一个形参n，可以接受用户输入</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cal02</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> res <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   res<span class="token operator">+=</span>i<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cal02的计算结果="</span><span class="token operator">+</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>           <span class="token comment">//添加getSum成员方法，可以计算两个数的和</span>   <span class="token comment">//解读</span>   <span class="token comment">//1.public表示方法是公开的</span>   <span class="token comment">//2.int:表示方法执行后，返回一个int值</span>   <span class="token comment">//3.getSum方法名</span>   <span class="token comment">//4.(int num1,int num2）形参列表，2个形参，可以接受用户传入的两个数</span>   <span class="token comment">//5.return res;表示把res的值，返回</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> res <span class="token operator">=</span>num1<span class="token operator">+</span>num2<span class="token punctuation">;</span>   <span class="token keyword">return</span> res<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>   <span class="token comment">//方法调用小结</span><span class="token comment">/* *1.当程序执行到方法时，就会开辟一个独立的空间（栈空间) *2.当方法执行完毕，或者执行到return语句时，就会返回； *3.返回到调用方法的地方 *4.返回后，继续执行方法后面的代码 *5.当main（）方法（栈）执行完毕，整个程序退出 * */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法的调用机制原理"><a href="#方法的调用机制原理" class="headerlink" title="方法的调用机制原理"></a>方法的调用机制原理</h3><p>分析getSum</p><p><img src="/2022/08/06/cheng-yuan-fang-fa/07.png"></p><h3 id="为什么需要成员方法"><a href="#为什么需要成员方法" class="headerlink" title="为什么需要成员方法"></a>为什么需要成员方法</h3><ul><li><p>看一个需求<br>请遍历一个数组，输出每个数组的各个元素值</p></li><li><p>解决思路</p></li></ul><ol><li>传统方法：使用单个for循环，将数组输出</li><li>定义一个类MyTools，写一个成员方法，调用方法实现</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Method02</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span>        <span class="token comment">//使用方法完成数组</span>        <span class="token class-name">MyTools</span> too1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyTools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        too1<span class="token punctuation">.</span><span class="token function">printArr</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        too1<span class="token punctuation">.</span><span class="token function">printArr</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        too1<span class="token punctuation">.</span><span class="token function">printArr</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//遍历map数组</span>        <span class="token comment">//传统的解决方式就是直接执行</span><span class="token comment">//        for(int i=0;i&lt;map.length;i++) &#123;</span><span class="token comment">//        for(int j=0;j&lt;map[i].length;j++) &#123;</span><span class="token comment">//        System.out.print(map[i][j]+" ");</span><span class="token comment">//        &#125;</span><span class="token comment">//        System.out.println();</span><span class="token comment">//        &#125;</span>        <span class="token comment">//....</span>        <span class="token comment">//</span>        <span class="token comment">//要求再次遍历            </span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//把输出的功能，写到一个类的方法中，然后调用该方法即可</span><span class="token keyword">class</span> <span class="token class-name">MyTools</span><span class="token punctuation">&#123;</span><span class="token comment">//方法，接受一个二维数组</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printArr</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对传入的map数组进行遍历输出</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>map<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\t "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//方法的好处：1.提高了代码的复用性</span><span class="token comment">//成员方法的定义</span><span class="token comment">//public返回数据类型 方法名（形参列表..）&#123; //方法体</span><span class="token comment">//        语句</span><span class="token comment">//        return 返回值；&#125;</span><span class="token comment">/*1.参数列表：表示成员方法输入 cal（int n）  2.数据类型（返回类型）：表示成员方法输出，void表示没有返回值  3.方法主题：表示为了实现某一功能的代码  4.return语句不是必须的 */</span><span class="token comment">//访问修饰符有public protected 默认 private</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="成员方法的好处"><a href="#成员方法的好处" class="headerlink" title="成员方法的好处"></a>成员方法的好处</h3><ol><li>提高代码的复用性</li><li>可以将实现的细节封装起来，然后供其他用户来调用即可</li></ol><h3 id="成员方法的定义"><a href="#成员方法的定义" class="headerlink" title="成员方法的定义"></a>成员方法的定义</h3><p><strong>访问修饰符 返回数据类型 方法名(形参列表) {&#x2F;&#x2F;方法体 语句；[return 返回值;]}</strong></p><ol><li>形参列表：表示成员方法输入 cal(int n)，getSum(int num1,int num2)</li><li>返回数据类型：表示成员方法输出，void表示没有返回值</li><li>方法主体：表示为了实现某一功能代码块</li><li>return语句不是必须的</li></ol><h3 id="注意事项和使用细节"><a href="#注意事项和使用细节" class="headerlink" title="注意事项和使用细节"></a>注意事项和使用细节</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDetail01</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token comment">//1.一个方法最多有一个返回值【思考，如何返回多个结果 返回数组】</span><span class="token class-name">AA</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> res<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">getSumAndSub</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"和="</span><span class="token operator">+</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"差="</span><span class="token operator">+</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//细节：调用带参数的方法时，一定对应着参数列表传入相同类型或兼容类型 的参数</span>        <span class="token keyword">byte</span> b1 <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> b2<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">getSumAndSub</span><span class="token punctuation">(</span>b1<span class="token punctuation">,</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//byte->int</span><span class="token comment">//a.getSumAndSub(1.1,1.8);// double ->int(x)</span><span class="token comment">//细节：实参和形参的类型要一致或兼容、个数、顺序必须一致</span>    <span class="token comment">//  a.getgetSumAndSub(100);//个数不一致×</span><span class="token comment">//细节：方法不能嵌套定义</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">AA</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getSumAndSub</span><span class="token punctuation">(</span><span class="token keyword">int</span> n1<span class="token punctuation">,</span><span class="token keyword">int</span> n2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resArr <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>resArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>n1<span class="token operator">+</span>n2<span class="token punctuation">;</span>resArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>n1<span class="token operator">-</span>n2<span class="token punctuation">;</span><span class="token keyword">return</span> resArr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//2.返回类型可以为任意类型，包含基本数据类型或应用类型（数组，对象）</span><span class="token comment">// 看getSumAndSub</span>    <span class="token comment">//3.如果方法要求有返回数据类型，则方法中最后的执行语句必须为 return值</span><span class="token comment">//而且要求返回值类型必须和return的值类型一致或兼容</span><span class="token comment">//如果方法是void，则方法体中可以没有return语句，或者 只写return</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>访问修饰符(作用是控制  方法  使用的范围)<ul><li>如果不写默认访问，[有四种：public，protected，默认，private]</li></ul></li><li>返回数据类型</li></ul><ol><li><strong>一个方法最多有一个返回值</strong>[如何返回多个结果？   返回数组]</li><li>返回类型可以为任意类型，包含基本类型或引用类型(数组,对象)</li><li>如果方法要求有返回数据类型，则方法体中最后的执行语句必须为 return 值; 而且要求返回值类型必须和 return 的值类型一致或兼容</li><li>如果方法是 void，则方法体中可以没有 return 语句，或者只写 return</li></ol><ul><li>方法名</li></ul><p>遵循驼峰命名法，最好见名知意，开发中按照规范</p><ul><li>形参列表</li></ul><ol><li>一个方法可以有0个参数，也可以有多个参数，中间用逗号隔开，比如getSum(int n1,int n2)</li><li>参数类型可以为任意类型，包含基本数据类型或引用类型，比如printArr(int[] map)</li><li>调用带参数的方法，一定对应着参数列表传入相同类型或兼容类型的参数</li><li>方法定义时的参数称为形式参数，简称形参；方法调用时的传入参数称为实际参数，简称实参，实参和形参的类型要一致或兼容、个数、顺序必须一致</li></ol><ul><li>方法体</li></ul><p>里面写完成功能的具体的语句，可以为输入、输出、变量、运算、分支、循环、方法调用，但里面不能再定义方法!即:方法不能嵌套定义</p><ul><li>方法调用的细节说明</li></ul><p>1.同一个类中的方法调用:直接调用即可。比如print(参数)<br>2.跨类中的方法A类调用B类方法:需要通过对象名调用。比如对象名.方法名(参数)<br>3.特别说明一下:跨类的方法调用和方法的访问修饰符相关</p><h3 id="类定义的完善"><a href="#类定义的完善" class="headerlink" title="类定义的完善"></a>类定义的完善</h3><p><img src="/2022/08/06/cheng-yuan-fang-fa/08.png"></p><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><ol><li>编写类 AA ，有一个方法：判断一个数是奇数 odd 还是偶数，返回boolean</li><li>根据行、列、字符打印 对应行数和列数的字符，比如：行：4，列：4，字符#,则打印相应的效果</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodExercise01</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token class-name">AAA</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">AAA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//int n;</span><span class="token comment">//Scanner c=new Scanner(System.in);</span><span class="token comment">//n =c.nextInt();</span><span class="token comment">//boolean b=a.isOdd(n);</span><span class="token comment">//if(b=false) &#123;</span><span class="token comment">//System.out.println("是偶数");&#125;</span><span class="token comment">//else &#123;</span><span class="token comment">//         System.out.println("是奇数");</span><span class="token comment">//&#125;</span><span class="token comment">//使用print方法</span><span class="token class-name">Scanner</span> c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> x1<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> x2<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> q<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//编写类AAA，有一个方法：判断一个数是奇数odd还是偶数，返回booolean</span><span class="token keyword">class</span> <span class="token class-name">AAA</span><span class="token punctuation">&#123;</span><span class="token comment">//思路</span><span class="token comment">//1.方法的返回类型boolean</span><span class="token comment">//2.方法的名字  isOdd</span><span class="token comment">//3.方法的形参 （int number)</span><span class="token comment">//4.方法体,判断</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//if(num%2!=0) &#123;</span><span class="token comment">//return ture;</span><span class="token comment">//&#125;else &#123;</span><span class="token comment">//return false;</span><span class="token comment">//&#125;</span><span class="token comment">//return num%2!=0?true:false;</span><span class="token keyword">return</span> num<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//根据行、列、字符打印 对应行数和列数的字符，</span><span class="token comment">//比如：行：4，列：4，字符#，咋打印相应的效果</span><span class="token comment">/* * #### * #### * #### * #### *  */</span><span class="token comment">//1.方法的返回类型 void</span><span class="token comment">//2.方法的名字 printchar</span><span class="token comment">//3.方法的形参(int row，int column，char c)</span><span class="token comment">//4.方法体，循环</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span><span class="token keyword">int</span> col<span class="token punctuation">,</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>row<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>col<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//输出每一行</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//换行</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> -java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类与对象</title>
      <link href="/2022/08/05/lei-yu-dui-xiang/"/>
      <url>/2022/08/05/lei-yu-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><h3 id="看一个养猫猫的问题"><a href="#看一个养猫猫的问题" class="headerlink" title="看一个养猫猫的问题"></a>看一个养猫猫的问题</h3><p>张老太养了两只猫猫:一只名字叫小白,今年 3 岁,白色。还有一只叫小花,今年 100 岁,花色。请编写一个程序，当用户输入小猫的名字时，就显示该猫的名字，年龄，颜色。如果用户输入的小猫名错，则显示 张老太没有这只猫</p><h3 id="使用现有技术解决"><a href="#使用现有技术解决" class="headerlink" title="使用现有技术解决"></a>使用现有技术解决</h3><ol><li>单独的定义变量解决</li><li>使用数组解决</li></ol><h3 id="现有技术解决缺点分析"><a href="#现有技术解决缺点分析" class="headerlink" title="现有技术解决缺点分析"></a>现有技术解决缺点分析</h3><p>不利于数据管理<br>效率低 &#x3D;&#x3D;&#x3D;》 引出类与对象<br>java设计者引入类与对象（OOP），根本原因就是现有的技术，不能完美解决新的需求</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Object01</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token comment">//第一只猫的信息</span><span class="token class-name">String</span> cat1Name<span class="token operator">=</span><span class="token string">"小白"</span><span class="token punctuation">;</span><span class="token keyword">int</span> cat1Age <span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token class-name">String</span> cat1Color <span class="token operator">=</span><span class="token string">"白色"</span><span class="token punctuation">;</span><span class="token comment">//第二只猫的信息</span><span class="token class-name">String</span> cat2Name <span class="token operator">=</span><span class="token string">"小花"</span><span class="token punctuation">;</span><span class="token keyword">int</span> cat2Age<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token class-name">String</span> cat2Color<span class="token operator">=</span><span class="token string">"花色"</span><span class="token punctuation">;</span><span class="token comment">//用数组来表示</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cat1<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"小白"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"白色"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cat2<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"小花"</span><span class="token punctuation">,</span><span class="token string">"100"</span><span class="token punctuation">,</span><span class="token string">"花色"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一个程序就是一个世界，有很多世界"><a href="#一个程序就是一个世界，有很多世界" class="headerlink" title="一个程序就是一个世界，有很多世界"></a>一个程序就是一个世界，有很多世界</h3><ul><li>对象<ul><li>属性</li><li>行为</li></ul></li></ul><h3 id="类与对象的关系示意图"><a href="#类与对象的关系示意图" class="headerlink" title="类与对象的关系示意图"></a>类与对象的关系示意图</h3><p><img src="/2022/08/05/lei-yu-dui-xiang/01.png"></p><p><img src="/2022/08/05/lei-yu-dui-xiang/03.png"></p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p>用面向对象的方式解决养猫问题</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Object01</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//1. new Cat()创建一个猫(猫对象)</span><span class="token comment">//2.Cat cat1=new Cat;把创建的猫赋给 cat1</span>    <span class="token comment">//3.cat1就是一个对象</span><span class="token class-name">Cat</span> cat1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"小白"</span><span class="token punctuation">;</span>cat1<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>cat1<span class="token punctuation">.</span>color <span class="token operator">=</span><span class="token string">"白色"</span><span class="token punctuation">;</span><span class="token comment">//创建了第二只猫，并赋给 cat2</span><span class="token comment">//cat2 也是一个对象（猫对象）</span><span class="token class-name">Cat</span> cat2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat2<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"小花"</span><span class="token punctuation">;</span>cat2<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>cat2<span class="token punctuation">.</span>color<span class="token operator">=</span><span class="token string">"花色"</span><span class="token punctuation">;</span><span class="token comment">//怎么访问对象的属性呢</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一只猫的信息"</span><span class="token operator">+</span>cat1<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>cat1<span class="token punctuation">.</span>age<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>cat1<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二只猫的信息"</span><span class="token operator">+</span>cat2<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>cat2<span class="token punctuation">.</span>age<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>cat2<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//定义一个猫类Cat->自定义的数据类型</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">&#123;</span><span class="token comment">//属性</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//名字</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">//年龄</span><span class="token class-name">String</span> color<span class="token punctuation">;</span><span class="token comment">//颜色</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类与对象之间的区别和联系"><a href="#类与对象之间的区别和联系" class="headerlink" title="类与对象之间的区别和联系"></a>类与对象之间的区别和联系</h3><p>通过上面的案例和讲解我们可以看出：</p><ol><li>类是抽象的，概念的，代表一类事物，比如人类，猫类，…，即它是<strong>数据类型</strong></li><li>对象是具体的，实际的，代表一个具体事物，即是实例</li><li>类是对象的模板，对象是类的一个个体，对应一个实例</li></ol><h3 id="对象在内存中的存在形式（重要）"><a href="#对象在内存中的存在形式（重要）" class="headerlink" title="对象在内存中的存在形式（重要）"></a>对象在内存中的存在形式（重要）</h3><p><img src="/2022/08/05/lei-yu-dui-xiang/04.png"></p><h3 id="属性-x2F-成员变量-x2F-变量"><a href="#属性-x2F-成员变量-x2F-变量" class="headerlink" title="属性&#x2F;成员变量&#x2F;变量"></a>属性&#x2F;成员变量&#x2F;变量</h3><ul><li>基本介绍</li></ul><ol><li>从概念和叫法上看：<strong>成员变量&#x3D;属性&#x3D;field（字段）（即成员变量是用来表示属性的）</strong><br>案例演示：Car（name，price，color）<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Object02</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//属性，成员变量，字段field</span><span class="token keyword">double</span> peice<span class="token punctuation">;</span><span class="token class-name">String</span> color<span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> master<span class="token punctuation">;</span><span class="token comment">//属性可以是基本数据类型，也可以是引用数据类型（对象，数组)。</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>属性</strong>是类的一个组成部分，<strong>一般是基本数据类型，也可以是引用类型（对象，数组）</strong>.比如前面定义猫类的int age就是属性</li></ol><ul><li>注意事项和细节说明</li></ul><ol><li>属性的定义语法同变量，示例：访问修饰符 属性类型 属性名</li><li>属性的定义类型可以为任意类型，包含基本类型或引用类型</li><li>属性如果不赋值，有默认值，规则和数组一致。具体说：<strong>int 0， short 0， byte 0， long 0， float 0.0， double 0.0，char \u0000， boolean false， String null</strong></li></ol><ul><li>案例演示：[Person类]<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertiesDetail</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token comment">//p1 是对象名（对象引用）</span><span class="token comment">//newPerson()创建的对象空间（数据)才是真正的对象</span><span class="token class-name">Person0</span> p1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对象得属性默认值，遵守数组规则：</span><span class="token comment">//属性如果不赋值，有默认值</span><span class="token comment">//int 0,short 0,byte 0,long 0,float 0.0,double 0.0,char \u0000,boolean</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n当前这个人的信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"age="</span><span class="token operator">+</span>p1<span class="token punctuation">.</span>age<span class="token operator">+</span><span class="token string">"name="</span>        <span class="token operator">+</span>p1<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"sal="</span><span class="token operator">+</span>p1<span class="token punctuation">.</span>sal<span class="token operator">+</span><span class="token string">"isPass"</span><span class="token operator">+</span>p1<span class="token punctuation">.</span>isPass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person0</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">double</span> sal<span class="token punctuation">;</span><span class="token keyword">boolean</span> isPass<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="如何创建对象"><a href="#如何创建对象" class="headerlink" title="如何创建对象"></a>如何创建对象</h3><ol><li>先声明再创建<br> Cat cat;&#x2F;&#x2F;声明对象cat<br> cat &#x3D; new Cat();</li><li>直接创建<br> Cat cat &#x3D; new Cat();</li></ol><h3 id="如何访问属性"><a href="#如何访问属性" class="headerlink" title="如何访问属性"></a>如何访问属性</h3><ul><li>基本语法<br>  <strong>对象.属性名</strong></li><li>案例演示赋值与输出<br>cat.name;<br>cat.age;<br>cat.color;</li><li>类和对象的内存分配机制<br>看一个思考题<br>定义一个人类(Person)包括(名字,年龄)<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Object03</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token class-name">Person</span> p1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"小明"</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2<span class="token operator">=</span>p1<span class="token punctuation">;</span><span class="token comment">//p1赋值给了p2</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>p2.age究竟是多少？</strong></p><p><img src="/2022/08/05/lei-yu-dui-xiang/05.png"></p><h3 id="类和对象的内存分配机制"><a href="#类和对象的内存分配机制" class="headerlink" title="类和对象的内存分配机制"></a>类和对象的内存分配机制</h3><ul><li>Java内存的结构分析</li></ul><ol><li><strong>栈：一般存放基本数据类型（局部变量）</strong></li><li><strong>堆：存放对象（Cat cat ，数组等）</strong></li><li><strong>方法区：常量池（常量，比如字符串），类加载信息</strong></li></ol><ul><li>Java 创建对象的流程简单分析<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>name <span class="token operator">=</span> “jack”<span class="token punctuation">;</span>p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ol><li>先加载 Person 类信息(属性和方法信息, 只会加载一次)</li><li>在堆中分配空间, 进行默认初始化(看规则)</li><li>把地址赋给 p , p 就指向对象</li><li>进行指定初始化， 比如 p.name &#x3D;”jack” p.age &#x3D; 10</li></ol><ul><li>看一个练习题，分析内存布局图<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token punctuation">;</span><span class="token class-name">Person</span> b<span class="token punctuation">;</span>b<span class="token operator">=</span>a<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//System.out.println(b.age);//出现异常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="/2022/08/05/lei-yu-dui-xiang/06.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客</title>
      <link href="/2022/08/04/hexo-da-jian-bo-ke/"/>
      <url>/2022/08/04/hexo-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="1前期准备"><a href="#1前期准备" class="headerlink" title="1前期准备"></a>1前期准备</h2><h3 id="1-1下载并安装node"><a href="#1-1下载并安装node" class="headerlink" title="1.1下载并安装node"></a>1.1下载并安装node</h3><ul><li><p>官网下载：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p></li><li><p>安装后验证：node -v</p></li></ul><h3 id="1-2下载并安装git"><a href="#1-2下载并安装git" class="headerlink" title="1.2下载并安装git"></a>1.2下载并安装git</h3><ul><li><p>官网下载：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p></li><li><p>安装后验证：git -v</p></li></ul><h3 id="1-3命令行安装cnpm"><a href="#1-3命令行安装cnpm" class="headerlink" title="1.3命令行安装cnpm"></a>1.3命令行安装cnpm</h3><ul><li>命令：<strong>npm install -g cnpm –registry&#x3D;&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></strong></li><li>安装后验证：cnpm -v</li></ul><h3 id="1-4命令行安装hexo"><a href="#1-4命令行安装hexo" class="headerlink" title="1.4命令行安装hexo"></a>1.4命令行安装hexo</h3><ul><li><p>命令：cnpm install -g hexo-cli</p></li><li><p>安装后验证：hexo -v</p></li></ul><h2 id="2配置github"><a href="#2配置github" class="headerlink" title="2配置github"></a>2配置github</h2><h3 id="2-1在github上创建仓库"><a href="#2-1在github上创建仓库" class="headerlink" title="2.1在github上创建仓库"></a>2.1在github上创建仓库</h3><p>创建：</p><ul><li>新建一个名为你的用户名.github.io的仓库</li><li>比如说，你的github用户名为chtholly，那么就新建chtholly.github.io的仓库，将来你的网站访问地址就是 <a href="http://chtholly.github.io/">http://chtholly.github.io</a> ，因此，一个github账户最多创建一个这样直接使用域名访问的仓库。</li></ul><p>注意：</p><ul><li>注册的邮箱一定要验证，否则不会成功</li></ul><p><img src="/2022/08/04/hexo-da-jian-bo-ke/%E5%88%9B%E5%BB%BAgithub%E4%BB%93%E5%BA%93-16596186964872.png"></p><h2 id="3配置SSH免密登录"><a href="#3配置SSH免密登录" class="headerlink" title="3配置SSH免密登录"></a>3配置SSH免密登录</h2><p>提交代码需要拥有你的github权限，直接使用用户名和密码不太安全，使用ssh key解决本地和服务器的连接问题。</p><ol><li><p>首先打开电脑文件夹，找到C:\Users\你的用户名.ssh文件夹并删除</p></li><li><p>在C:\Users\你的用户名 文件夹下右键打开Git Bash Here，输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C github邮箱地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入后一直回车确认即可</p></li><li><p>最后会生成一个新的文件夹.ssh文件夹，打开这个文件夹，找到id_rsa.pub文件，记事本打开并复制里面的内容</p></li><li><p>打开你的github主页，进入个人设置-&gt;SSH and GPG keys-&gt;New SSH key，把复制的内容粘贴进去，title能够用于区分即可。</p></li></ol><p><img src="/2022/08/04/hexo-da-jian-bo-ke/SSH_key-16596186837501.png"></p><ol start="5"><li>检测是否设置成功：<br>输入<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> -T git@github.com <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>如果提示Are you sure you want to continue connecting (yes&#x2F;no)?，输入yes，然后会看到：</li></ol><p>Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access.</p><p>看到这个信息说明SSH已配置成功</p><ol start="6"><li>最后还需配置：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config –global user.name <span class="token string">"XXX"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>引号内为你的github用户名<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config –global user.email <span class="token string">"xxx@xx.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>引号内为github注册的邮箱</li></ol><h2 id="4使用hexo搭建博客"><a href="#4使用hexo搭建博客" class="headerlink" title="4使用hexo搭建博客"></a>4使用hexo搭建博客</h2><h3 id="4-1初始化"><a href="#4-1初始化" class="headerlink" title="4.1初始化"></a>4.1初始化</h3><ol><li><p>在电脑的某个地方新建一个文件夹作为存放代码的地方，例如D:\hexo（名字位置均可随意，能够记住即可）</p></li><li><p>在该文件夹内右键打开Git Bash Here，输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ul><li>hexo会自动下载一些文件到该目录</li></ul><ol start="3"><li><p>执行以下命令，hexo会在public文件夹生成相关html文件，这些文件将来都是要提交到github上去的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo g <span class="token comment">#生成</span>$ hexo s <span class="token comment">#启动，本地预览</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>hexo s是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到内容，如果不能成功打开，可能是因为4000端口被占用，可以在命令窗口中通过 netstat -aon | find &#x2F;i “listening” 来监听端口，使用    taskkill &#x2F;PID  对应的PID      来结束对应进程</p></li></ol><h3 id="4-2将博客部署到github个人主页上"><a href="#4-2将博客部署到github个人主页上" class="headerlink" title="4.2将博客部署到github个人主页上"></a>4.2将博客部署到github个人主页上</h3><ol><li>在D:\hexo(你创建的目录)目录下安装hexo-deployer-git插件</li></ol><ul><li>安装命令：npm install hexo-deployer-git –save</li><li>注意：必须安装，否则执行hexo d会报错</li></ul><ol start="2"><li>编辑D:\hexo目录下的_config.yml文件，在文末添加：<br> type: git<br> repository: <a href="mailto:&#103;&#105;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#x2e;&#x63;&#x6f;&#x6d;">&#103;&#105;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#x2e;&#x63;&#x6f;&#x6d;</a>:Chtholly2333&#x2F;Chtholly2333.github.io.git<br> branch: master</li></ol><ul><li>注意：其中repository中的内容为github个人主页链接地址<br><img src="/2022/08/04/hexo-da-jian-bo-ke/git%E4%B8%BB%E9%A1%B5%E5%9C%B0%E5%9D%80-16596187286833.png"></li></ul><ol start="3"><li>在D:\hexo目录下，输入命令：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>将本地的blog推送到github仓库，可能需要输入username和pwd，完成后即可在浏览器中访问https:&#x2F;&#x2F;你的github用户名.github.io&#x2F;</li></ol><h2 id="5-美化博客"><a href="#5-美化博客" class="headerlink" title="5.美化博客"></a>5.美化博客</h2>]]></content>
      
      
      
        <tags>
            
            <tag> -hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《爱莉希雅》</title>
      <link href="/2022/08/04/ai-li-xi-ya/"/>
      <url>/2022/08/04/ai-li-xi-ya/</url>
      
        <content type="html"><![CDATA[<p>她深知，在告别世界时，一个人理应带走属于自己的所有，以免余众哀伤。<br>她也同样知晓，那是自己绝对无法做到的事。<br>她在这世间所留下的，实在太多……遍及一切，远至永恒。<br>于是，她决定……要最后再任性一次。<br>任性地把她曾见证的所有，把她所爱的所有，把她留下的所有……<br>把这世间所有的一切，都汇集在一起，编纂成册——<br>是啊，她最终所留下的，不过就是一段故事而已。<br>关于曾经那美好的时代，关于那未能成为英雄的十三个人……<br>就只是一个这样简单的故事，仅此而已。</p><p><img src="/2022/08/04/ai-li-xi-ya/%E7%88%B1%E8%8E%89%E5%B8%8C%E9%9B%852.jpg"></p><p>爱莉希雅，逐火英桀第二位，第一位为人类而战的律者，一位如水晶花般可爱又美丽的少女。她的美纯粹而无暇，一头粉色的长发披散在玲珑的双肩，在她向你满含柔情带着些许挑逗款款而来时，这一袭长发恰似樱花漫舞，摇曳生姿。在你为她的美丽而沉醉，沉醉而带着些许羞怯频频窥望她时，她会绽放如花一般的微笑，带着几分调皮的语调柔情似水地对你说一句：“你可以更光明正大地看向我哟！”她也与其他女孩一样喜欢美丽的事物，就连她的武器也是拥有如她一般唯美的形态。她战斗的身姿优雅而从容，即使面对强大的敌人也不改她那美丽的笑颜，自信而强大是她的代名词，在优雅的舞姿中向敌人施以万箭穿心的疼痛，送去死亡的终曲。</p><p>我们也许永远无法看到她伤心忧愁的模样，因为她总是喜欢将自己的痛苦藏在心里，用阳光柔媚的笑容将它永远埋藏，她美丽的脸庞永远带着可爱的笑意，一双缀满星辰的眼眸时不时闪动着点点微光。当她将目光投向你时，仿佛能够瞬间刺穿你所带上的所有伪装，直抵你内心最温柔的地方，悄悄为你种上鲜花，留下的是花香，带走的是忧伤。</p><p><img src="/2022/08/04/ai-li-xi-ya/%E7%88%B1%E8%8E%89%E5%B8%8C%E9%9B%853.jpg"></p><p>但是，也就是这样一位如花朵般单纯又美丽的少女，就算被人们猜忌、被人们避而远之，她也依旧爱着所有人，在终焉律者降临前想尽一切办法团结人类，用自己的权能改写人类的命运，最终以“成为第十三律者”这个谎言献出了自己的生命。但她毫无畏惧，也从不后悔，因为她爱着世人，相信着世人。 </p><p>爱莉希雅，持真我之铭的美丽战士，为守护万物众生甘做逐火的飞蛾，在火焰中化为星火，照亮前方那段未尽的旅程，指引后继者前往那个她未能到达的地方。这就是你，美丽得让人自甘沉沦，温柔得让人心疼万分，一切的一切因你的绽放而开始，一切的一切又因你的凋零而走向终结。</p><p>TruE<br>真，意为真相，真我<br>T-r-u-E<br>T—-To<br>r—-really<br>u—-unfailing<br>『始终如一』<br>E—-Elysia<br>『爱莉希雅』<br>TruE—-To really unfailing Elysia&#x2F;To real you Elysia<br>爱莉一生只撒了一个『谎言』，却涵盖了她的『一生』<br>在『真相』的结局，她仍是我们的『爱莉希雅』<br>『致以真实的你』，『完美无瑕』的，『爱莉希雅』<br>若能回到过去<br>我会拯救你<br>我会创造一个新的时空<br>一个你存在的时空<br>一个，只属于你的时空</p><p><img src="/2022/08/04/ai-li-xi-ya/%E7%88%B1%E8%8E%89%E5%B8%8C%E9%9B%851.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/03/hello-world/"/>
      <url>/2022/08/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
